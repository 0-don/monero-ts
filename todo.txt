HIGH
don't wrap single return fields with MoneroDaemonModel?
standardize getTxCount(), getConfirmationCount()
license headers
merge txs as state changes e.g. becomes confirmed
MoneroTx constructor vs copy
todos throughout code
tests are unecessarily creating new accounts which degrades test performance
support sweep_single (output)
block comments with params and formatting
test daemon/wallet txs getIsCoinbase()
test daemon / wallet getTxs() with unfound txs (throw error?)
test getting coinbase txs by id
verify that all tx fields are being tested

LOW
switch to jest?
time profiling
in wallet implementation: "prepend the last 3 blocks, should be enough to guard against a block or two's reorg" pull_and_parse_next_blocks
binary_blocks_to_json property_tree conversion throws memory exception if too big
tx hex returned from rpc api even if not needed
remove text-encoding dependency
package asm for browser build under different directory (MyMoneroCoreBridge.js:740)
JS now has native BigInt class which could be used instead of current BigInteger
support setting daemon log level
split BooleanSet into new project
add MoneroOutput and test
tx.getIsUnlocked()?
way to throttle rpc requests with agent instead of throttle-request to preserve stacktrace?
document model fields
add config options to tests, maybe use test objects per
daemon.getBlocksById(), default implementations

BUILD
build process to not read mymonero-core-js build and contrib to browser build
update on save B-)

RPC QUESTIONS / SUGGESTIONS
identify one call per acount/subaddress and support "all" flag
/get_transactions returns duplicate data per transaction
non-standardized ("portable binary storage") serialization/deserialization for binary requests adds complexity to clients
tx.getHex().length !== tx_size?