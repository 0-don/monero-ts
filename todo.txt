HIGH
merge asserts type or accepts undefined as matter of policy
all model set functions return this
getAccounts() fetches balance even if only thing needed are account indices
optimize rpc calls
not testing sweep
differentiate filters, filter by account index or indices
getTxs(filter) returns complete txs
getPayments(filterOrAccountIdx, subaddressIdx, payment.getTxs(), can be optimized to only what's desired, unlike building complete txs, which may fetch incoming unecessarily
getIncomingPayments(filterOrAccountIdx, subaddressIdx)
getOutgoingPayments(filterOrAccountIdx, subaddressIdx)
getVouts(filterOrAccoutnIdx, subaddressIdx);
differentiate filters
test tx filter hasOutgoingPayments, hasIncomingPayments
simple tests for getting incoming/outgoing txs
one place to test wallet accounting with txs (unspent outputs = wallet balance, incoming amts = outgoing amts, etc)
support send priority
test send tx with multiple payments with duplicate receive address, specifically check outgoing merging
common tx tests need cleanup
set subaddress getUnspentOutputCount() with outputs assigned
tx serialization and deserialization tests
GC error if tx.merge input === tx, test specifically
how to handle 'confirmations' block height to add the tx to the chain if unconfirmed? corallary of unlock time?
test response info of wallet.getTxs()
investigate performance of get single tx by id, way too many requests
no test timeout
merge txs as state changes e.g. becomes confirmed (handle notifications?)
don't wrap single return fields with MoneroDaemonModel?
license headers
todos throughout code
tests are unecessarily creating new accounts which degrades test performance
support sweep_single (output)
block comments with params and formatting
test daemon/wallet txs getIsCoinbase()
test daemon / wallet getTxs() with unfound txs (throw error?)
test getting coinbase txs by id
verify that all tx fields are being tested

LOW
duplicate outgoing transfers returned for different subaddress indices, way to include subaddress indices?
safeguard all apis by heavily validating input parameters
send to multiple, suggested_confirmation_threshold outgoing payment 6 but incoming payments 1; large discrepency
don't get tx hex unless requested
get_transfers filters by subaddress idx even though minor 0 always returned
switch to jest?
time profiling
in wallet implementation: "prepend the last 3 blocks, should be enough to guard against a block or two's reorg" pull_and_parse_next_blocks
binary_blocks_to_json property_tree conversion throws memory exception if too big
tx hex returned from rpc api even if not needed
remove text-encoding dependency
package asm for browser build under different directory (MyMoneroCoreBridge.js:740)
JS now has native BigInt class which could be used instead of current BigInteger
support setting daemon log level
split BooleanSet into new project
add MoneroOutput and test
tx.getIsUnlocked()?
way to throttle rpc requests with agent instead of throttle-request to preserve stacktrace?
document model fields
add config options to tests, maybe use test objects per
daemon.getBlocksById(), default implementations

BUILD
build process to not read mymonero-core-js build and contrib to browser build
update on save B-)

RPC QUESTIONS / SUGGESTIONS
unconfirmed tx missing destinations even though known by wallet
send from/to same account, after first confirmation outgoing tx amount is 0 but has payments with amts, so discrepency
show_transfers returns unconfirmed outputs
introduce way to identify change output from blockchain? that solves unknown sent amt issue
identify one call per acount/subaddress and support "all" flag
/get_transactions returns duplicate data per transaction
